import os
import time
from datetime import datetime, timedelta

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from dotenv import load_dotenv

def init_driver(download_dir: str):
    options = webdriver.ChromeOptions()
    prefs = {"download.default_directory": os.path.abspath(download_dir)}
    options.add_experimental_option("prefs", prefs)
    options.add_argument("--start-maximized")
    return webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

def go_to_previous_day(driver, wait):
    """
    –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –¥–∞—Ç—É –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é, –∫–ª—ñ–∫–∞—é—á–∏ –ø–æ —Å—Ç—Ä—ñ–ª—Ü—ñ –ø–æ—Ä—É—á —ñ–∑ –¥–∞—Ç–æ—é (–∫–ª–∞—Å iconarrow-l fsUsePar).
    """
    try:
        prev_btn = wait.until(EC.element_to_be_clickable((
            By.CSS_SELECTOR,
            "div.iconarrow-l.fsUsePar"
        )))
        # JS-–∫–ª—ñ–∫, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ 'not clickable'
        driver.execute_script("arguments[0].click();", prev_btn)
        print("  ‚úî Clicked previous-day arrow")
        time.sleep(5)  # —á–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∞—Ç—å—Å—è –¥–∞–Ω—ñ
    except Exception as e:
        print(f"  ‚úñ Failed to click previous-day arrow: {e}")

def download_data(driver, inverter_url: str, download_dir: str, days: int):
    wait = WebDriverWait(driver, 20)

    # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞
    driver.get(inverter_url)
    time.sleep(5)

    for i in range(days):
        print(f"Day {i+1}/{days} ‚Äî exporting...")

        # 1) –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
        try:
            export_btn = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button.export-btn")))
            export_btn.click()
            print("  ‚úî Export clicked")
            time.sleep(8)  # —á–µ–∫–∞—î–º–æ, –∫–æ–ª–∏ —Ñ–∞–π–ª –∑–∫–∞—á–∞—î—Ç—å—Å—è
        except Exception as e:
            print(f"  ‚úñ Export failed: {e}")

        # 2) –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥–µ–Ω—å
        go_to_previous_day(driver, wait)

def main():
    load_dotenv()
    download_dir = "data/raw"
    os.makedirs(download_dir, exist_ok=True)

    inverter_url = "https://www.deyecloud.com/station/device?id=61156646&hasSetPrice=false"
    days_to_download = 180  # –æ—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤

    driver = init_driver(download_dir)
    try:
        driver.get(inverter_url)
        input("üîë –ë—É–¥—å –ª–∞—Å–∫–∞, –ª–æ–≥—ñ–Ω—ñ—Ç—å—Å—è –≤—Ä—É—á–Ω—É –≤ –±—Ä–∞—É–∑–µ—Ä—ñ, –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ENTER‚Ä¶")
        download_data(driver, inverter_url, download_dir, days_to_download)
    finally:
        driver.quit()

if __name__ == "__main__":
    main()
