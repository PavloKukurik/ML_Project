#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–û–± º—î–¥–Ω—É—î –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ .xlsx-—Ñ–∞–π–ª–∏ —ñ–Ω–≤–µ—Ä—Ç–æ—Ä–∞ —É –¥–≤–∞ —î–¥–∏–Ω—ñ CSV:
  ‚Ä¢ daily_merged.csv     ‚Äî –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–µ–Ω–Ω—ñ —Ñ–∞–π–ª–∏
  ‚Ä¢ monthly_merged.csv   ‚Äî –∞–≥—Ä–µ–≥–æ–≤–∞–Ω—ñ –º—ñ—Å—è—á–Ω—ñ —Ñ–∞–π–ª–∏
–ó–∞–ø—É—Å–∫:
    python src/data/merge_inverter_data.py
"""

import os, glob, sys
import pandas as pd
from pathlib import Path

RAW_DAILY_DIR   = Path("data/raw")          # —Å—é–¥–∏ Selenium –∫–ª–∞–¥–µ –¥–æ–±–æ–≤—ñ .xlsx
RAW_MONTH_DIR   = Path("data/raw_month")    # —Å—é–¥–∏ ‚Äî –º—ñ—Å—è—á–Ω—ñ .xlsx
OUT_DAILY_DIR   = Path("data/processed/daily")
OUT_MONTH_DIR   = Path("data/processed/monthly")
DAILY_CSV       = OUT_DAILY_DIR / "daily_merged.csv"    # –∞–±–æ .csv.gz
MONTH_CSV       = OUT_MONTH_DIR / "monthly_merged.csv"  # –∞–±–æ .csv.gz


def merge_folder(folder: Path) -> pd.DataFrame:
    """–ß–∏—Ç–∞—î –≤—Å—ñ .xlsx —É –ø–∞–ø—Ü—ñ –π –∑—à–∏–≤–∞—î –≤ –æ–¥–∏–Ω DataFrame"""
    files = sorted(folder.glob("*.xlsx"))
    if not files:
        print(f"[WARN] no .xlsx in {folder}")
        return pd.DataFrame()

    frames = []
    for f in files:
        try:
            frames.append(pd.read_excel(f))
        except Exception as e:
            print(f"[ERR] {f.name}: {e}")

    if not frames:
        return pd.DataFrame()

    df = pd.concat(frames, ignore_index=True)

    # –≤–∏—Ä—ñ–≤–Ω—é—î–º–æ —Ç–∏–ø–∏ ‚Üí —á–∏—Å–ª–æ–≤—ñ –ª–∏—à–∞—é—Ç—å—Å—è —á–∏—Å–ª–æ–≤–∏–º–∏, —Ä–µ—à—Ç–∞ ‚Üí string
    df = df.convert_dtypes()
    obj_cols = df.select_dtypes(include="object").columns
    df[obj_cols] = df[obj_cols].astype("string")

    return df


def main() -> None:
    OUT_DAILY_DIR.mkdir(parents=True, exist_ok=True)
    OUT_MONTH_DIR.mkdir(parents=True, exist_ok=True)

    # --- –¥–µ–Ω–Ω—ñ ---
    print("üìö  merging DAILY exports ‚Ä¶")
    df_daily = merge_folder(RAW_DAILY_DIR)
    if not df_daily.empty:
        df_daily.to_csv(DAILY_CSV, index=False)           #  + compression="gzip"
        print(f"‚úÖ  saved {DAILY_CSV}  ({len(df_daily):,} rows)")
    else:
        print("‚ö†Ô∏è  daily folder empty ‚Äî skipped")

    # --- –º—ñ—Å—è—á–Ω—ñ ---
    print("\nüìö  merging MONTHLY exports ‚Ä¶")
    df_month = merge_folder(RAW_MONTH_DIR)
    if not df_month.empty:
        df_month.to_csv(MONTH_CSV, index=False)           #  + compression="gzip"
        print(f"‚úÖ  saved {MONTH_CSV}  ({len(df_month):,} rows)")
    else:
        print("‚ö†Ô∏è  monthly folder empty ‚Äî skipped")


if __name__ == "__main__":
    sys.exit(main())
