# src/bot/telegram_bot.py
"""
Telegram bot –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –±–∞—Ç–∞—Ä–µ—ó.
Commands:
  /start - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞
  /optimize [YYYY-MM-DD] - –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ —á–∞—Å–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∑–∞–¥–∞—Ç–∏ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TELEGRAM_TOKEN –∑ —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞.
"""
import os
from pathlib import Path
from datetime import datetime, timedelta
import pandas as pd
from battery_simulator import simulate_soc, load_predictions, SOC_MAX

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –®–ª—è—Ö–∏ –¥–æ –¥–∞–Ω–∏—Ö
PRED_DIR = Path("data/predictions")

# –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ ENV
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("Set TELEGRAM_TOKEN environment variable")

# –û–±—Ä–æ–±–Ω–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –±–∞—Ç–∞—Ä–µ—ó.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/start - —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "/optimize [YYYY-MM-DD] - –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ —á–∞—Å–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /optimize 2025-05-01\n"
    )
    await update.message.reply_text(text)

# –û–±—Ä–æ–±–Ω–∏–∫ /optimize
async def optimize(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É –∞–±–æ –±–µ—Ä–µ–º–æ –∑–∞–≤—Ç—Ä–∞
    if context.args:
        try:
            date_str = context.args[0]
            date = datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD.")
            return
    else:
        date = datetime.now().date() + timedelta(days=1)
        date_str = date.isoformat()

    pred_file = PRED_DIR / f"{date_str}_predictions.csv"
    if not pred_file.exists():
        await update.message.reply_text(f"–§–∞–π–ª –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {date_str}.")
        return

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑
    df_pred = load_predictions(pred_file)
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∞ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è
    total_pv = df_pred['pv_kw'].sum()
    total_load = df_pred['load_kw'].sum()

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ t_evening —è–∫ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É –ø—Ä–æ–≥–Ω–æ–∑—É (–ø—Ä–∏–±–ª. –∫—ñ–Ω–µ—Ü—å –¥–Ω—è)
    t_evening = df_pred['timestamp'].dt.hour.max()
    # –ü–æ—à—É–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ t_night (00-05:00, –∫—Ä–æ–∫ 1 –≥–æ–¥)
    best = None
    for h in range(0, 6):
        sim = simulate_soc(df_pred, t_night=h, t_evening=t_evening)
        imp = sim['grid_import_kw'].sum()
        if best is None or imp < best[2]:
            best = (h, sim['soc_pct'].iloc[-1], imp)

    h_best, soc_end, imp_best = best
    t_night = f"{h_best:02d}:00"
    t_even = f"{t_evening:02d}:00"

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    msg = (
        f"–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–ª—è {date_str}:\n"
        f"üîå –ù—ñ—á–Ω–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è (–Ω–∞ –ê–ö–ë): {t_night}\n"
        f"üåá –í–µ—á—ñ—Ä–Ω—î –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è (–Ω–∞ –º–µ—Ä–µ–∂—É): {t_even}\n"
        f"‚òÄÔ∏è –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è: {total_pv:.2f} kWh\n"
        f"üè† –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–µ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è: {total_load:.2f} kWh\n"
        f"üåê –Ü–º–ø–æ—Ä—Ç –∑ –º–µ—Ä–µ–∂—ñ: {imp_best:.2f} kWh\n"
        f"üîã –ö—ñ–Ω—Ü–µ–≤–∏–π SOC: {soc_end:.1f}%\n"
    )
    await update.message.reply_text(msg)

# –û—Å–Ω–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("optimize", optimize))
    print("Bot started...")
    app.run_polling()
